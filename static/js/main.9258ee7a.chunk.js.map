{"version":3,"sources":["components/ChatItem/ChatItem.module.scss","components/ChatItem/types.ts","components/UI/Comment/Comment.tsx","components/Message/Message.tsx","components/MessageList/MessageList.tsx","components/MessageList/MessageList.tesdata.tsx","components/MessageList/MessageList.container.tsx","components/UI/List/List.tsx","components/ChatItem/ChatItem.tsx","components/ChatItem/ChatItem.tesdata.tsx","components/ChatItem/ChatItem.container.tsx","components/Sidebar/Sidebar.tsx","components/Sidebar/Sidebar.container.tsx","components/Chat/Chat.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Sidebar/Sidebar.module.scss","components/Message/Message.module.scss","components/MessageList/MessageList.module.scss","components/Chat/Chat.module.scss","components/UI/Comment/Comment.module.scss"],"names":["module","exports","ETypeItem","Comment","avatar","label","content","timestamp","avatarDOM","className","styles","left","src","alt","contentDOM","right","top","comment","Message","props","ava","username","message","timestampFormated","toLocaleTimeString","hour","minute","MessageList","hasNextPage","isNextPageLoading","items","loadNextPage","chatId","itemCount","length","loadMoreItems","isItemLoaded","index","Row","style","isPinned","key","height","width","onItemsRendered","ref","itemSize","blank","getTestData","faker","name","firstName","random","number","Date","hacker","phrase","MessageListContainer","setState","setTimeout","state","concat","Array","fill","map","nextProps","this","React","List","children","ChatItem","chatType","shortmessage","divProps","date1","date2","getFullYear","getMonth","getDate","dateCompare","toLocaleDateString","item","ChatItemContainer","id","Promise","resolve","reject","aTypeItem","Object","keys","e","push","personal","itemType","arrayElement","image","words","currentDate","setTime","getTime","parseInt","then","response","Sidebar","aChats","handleClickCreator","activeChat","sidebar","chatProps","active","onClick","SidebarContainer","chatCount","chat","toString","getChats","Chat","undefined","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9258ee7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ChatItem_item__1Ldvj\",\"content\":\"ChatItem_content__2Egfm\"};","import { IChat } from 'types';\n// Component\n\nexport enum ETypeItem {\n  personal = 0,\n  group,\n  channel,\n}\n\n// these are all the optional props\nexport interface IDefaultProps {}\n\n// these are all the required props\nexport interface IProps\n  extends Partial<IDefaultProps>,\n    IChat,\n    React.HTMLProps<HTMLDivElement> {\n  chatType: ETypeItem;\n  ava: string;\n  label: string;\n  username?: string;\n  shortmessage: string;\n  timestamp?: Date;\n}\n\nexport interface IState {\n  // this might not be needed if the component doesn't have internal state\n}\n\nexport interface IContext {\n  // this might not be needed if the component doesn't consume the context\n}\n\n// Container\n\nexport type StateProps = Pick<\n  IProps,\n  'chatType' | 'ava' | 'label' | 'username' | 'shortmessage' | 'timestamp'\n>;\nexport type OwnProps = Omit<\n  IProps,\n  'chatType' | 'ava' | 'label' | 'username' | 'shortmessage' | 'timestamps'\n>;\n","import React from 'react';\n\nimport styles from './Comment.module.scss';\n\nexport interface ICommentProps {\n  avatar?: React.ReactNode;\n  label?: React.ReactNode;\n  content: React.ReactNode;\n  timestamp?: React.ReactNode;\n}\n\nexport const Comment: React.FC<ICommentProps> = ({\n  avatar,\n  label,\n  content,\n  timestamp,\n}) => {\n  const avatarDOM = (\n    <div className={styles.left}>\n      {typeof avatar === 'string' ? (\n        <img className={styles.avatar} src={avatar} alt=\"\" />\n      ) : (\n        avatar\n      )}\n    </div>\n  );\n\n  const contentDOM = (\n    <div className={styles.right}>\n      <p className={styles.top}>\n        {label && <span className={styles.label}>{label}</span>}\n        {timestamp && <span className={styles.timestamp}>{timestamp}</span>}\n      </p>\n      {content}\n    </div>\n  );\n\n  const commentDOM = (\n    <div className={styles.comment}>\n      {avatarDOM}\n      {contentDOM}\n    </div>\n  );\n\n  return commentDOM;\n};\n","import React, { FunctionComponent } from 'react';\nimport { Comment } from 'components/UI/Comment';\n\nimport { IProps } from './types';\n\nimport styles from './Message.module.scss';\n\nexport const Message: FunctionComponent<IProps> = (props) => {\n  const { ava, username, message, timestamp } = props;\n  const contentDOM = <p className={styles.content}>{message}</p>;\n  const timestampFormated = timestamp\n    ? timestamp.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n      })\n    : null;\n  return (\n    <Comment\n      avatar={ava}\n      label={username}\n      timestamp={timestampFormated}\n      content={contentDOM}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { FixedSizeList as List, ListChildComponentProps } from 'react-window';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport InfiniteLoader from 'react-window-infinite-loader';\n\nimport { IProps } from './types';\nimport { Message } from 'components/Message';\n\nimport styles from './MessageList.module.scss';\n\nexport const MessageList: FunctionComponent<IProps> = (props) => {\n  const { hasNextPage, isNextPageLoading, items, loadNextPage, chatId } = {\n    ...props,\n  };\n\n  // If there are more items to be loaded then add an extra row to hold a loading indicator.\n  const itemCount = hasNextPage ? items.length + 1 : items.length;\n\n  // Only load 1 page of items at a time.\n  // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\n  const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage;\n\n  // Every row is loaded except for our loading indicator row.\n  const isItemLoaded = (index: number) => !hasNextPage || index < items.length;\n\n  // Render an item or a loading indicator.\n  const Row = ({ index, style }: ListChildComponentProps) => {\n    // console.log(items[0]);\n    let content;\n    if (!isItemLoaded(index)) {\n      content = 'Loading...';\n    } else {\n      content = <Message chatId={chatId} isPinned={true} {...items[index]} />;\n    }\n    return (\n      <div key={`ch${index}`} style={style}>\n        {content}\n      </div>\n    );\n  };\n\n  // const { isItemLoaded, loadMoreItems } = { ...props };\n  return chatId ? (\n    <AutoSizer>\n      {({ height, width }) => (\n        <InfiniteLoader\n          isItemLoaded={isItemLoaded}\n          itemCount={itemCount}\n          loadMoreItems={loadMoreItems}\n        >\n          {({ onItemsRendered, ref }) => (\n            <List\n              className=\"List\"\n              height={height}\n              itemCount={itemCount}\n              itemSize={51}\n              onItemsRendered={onItemsRendered}\n              ref={ref}\n              width={width * 0.8}\n            >\n              {Row}\n            </List>\n          )}\n        </InfiniteLoader>\n      )}\n    </AutoSizer>\n  ) : (\n    <div className={styles.blank}>Выберите чат...</div>\n  );\n};\n","import { StateProps } from '../Message/types';\nimport faker from 'faker/locale/ru';\n\nlet getTestData = (): StateProps => {\n  let ava: string;\n\n  const username: string = faker.name.firstName();\n\n  ava = `https://picsum.photos/id/${faker.random.number(1000)}/48`;\n\n  let timestamp = new Date();\n  const itemTestData: StateProps = {\n    ava: ava,\n    username: username,\n    message: faker.hacker.phrase(),\n    timestamp: timestamp,\n  };\n\n  return itemTestData;\n};\n\nexport default getTestData;\n","import * as React from 'react';\n\nimport { OwnProps, StateProps } from './types';\n\nimport { MessageList } from './MessageList';\nimport getTestData from './MessageList.tesdata';\n\nclass MessageListContainer extends React.Component<OwnProps, StateProps> {\n  constructor(props: OwnProps) {\n    super(props);\n\n    this.state = {\n      hasNextPage: true,\n      isNextPageLoading: false,\n      items: [],\n    };\n  }\n\n  // Выше сообщения не нужно шарить, поэтому запрашиваем здесь\n  // Это lazy loading сообщений\n  // Чат конечный, в данном случае 1000 сообщений, в будущем - ответ от сервера\n  loadNextPage = () => {\n    this.setState({ isNextPageLoading: true }, () => {\n      setTimeout(() => {\n        this.setState((state) => ({\n          hasNextPage: state.items.length < 1000,\n          isNextPageLoading: false,\n          items: [...state.items].concat(\n            new Array(50).fill(true).map(() => getTestData()),\n          ),\n        }));\n      }, 250);\n    });\n  };\n\n  componentWillReceiveProps(nextProps: OwnProps) {\n    if (this.props.chatId !== nextProps.chatId) {\n      this.setState({ items: [] });\n    }\n  }\n\n  public render() {\n    const { hasNextPage, isNextPageLoading, items } = this.state;\n    const { chatId } = this.props;\n    return (\n      <MessageList\n        hasNextPage={hasNextPage}\n        isNextPageLoading={isNextPageLoading}\n        items={items}\n        loadNextPage={this.loadNextPage}\n        chatId={chatId}\n      />\n    );\n  }\n}\n\nexport { MessageListContainer as MessageList };\n","import React, { FunctionComponent } from 'react';\n\nexport const List: FunctionComponent = (props) => {\n  return <div>{props.children}</div>;\n};\n","import React, { FunctionComponent } from 'react';\nimport { Comment } from 'components/UI/Comment';\n\nimport { IProps } from './types';\n\nimport styles from './ChatItem.module.scss';\n\nconst dateCompare = (date1: Date, date2: Date = new Date()): boolean => {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n};\n\nexport const ChatItem: FunctionComponent<IProps> = (props) => {\n  const {\n    chatType,\n    ava,\n    label,\n    username,\n    shortmessage,\n    timestamp,\n    chatId,\n    isPinned,\n    className,\n    ...divProps\n  } = props;\n  const contentDOM = (\n    <p className={styles.content}>\n      {/* не отображаем имя для личных чатов */}\n      {chatType !== 0 ? `${username}: ` : null}\n      {shortmessage}\n    </p>\n  );\n  const timestampFormated = timestamp\n    ? dateCompare(timestamp)\n      ? timestamp.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n        })\n      : timestamp.toLocaleDateString()\n    : null;\n  return (\n    <div className={`${styles.item} ${className}`} {...divProps}>\n      <Comment\n        avatar={ava}\n        label={label}\n        timestamp={timestampFormated}\n        content={contentDOM}\n      />\n    </div>\n  );\n};\n","import { ETypeItem, StateProps } from './types';\nimport faker from 'faker/locale/ru';\n\nlet getTestData = (id: string): Promise<StateProps> => {\n  return new Promise((resolve, reject) => {\n    let ava: string;\n    let label: string;\n    let aTypeItem: ETypeItem[] = Object.keys(ETypeItem).map(\n      (e) => ETypeItem[e as keyof typeof ETypeItem],\n    );\n\n    //увеличиваем вероятность выпадения людей\n    aTypeItem.push(...Array(aTypeItem.length).fill(ETypeItem.personal));\n\n    const itemType: ETypeItem = faker.random.arrayElement(aTypeItem);\n    const username: string = faker.name.firstName();\n\n    switch (itemType) {\n      case ETypeItem.personal:\n        ava = faker.image.avatar();\n        label = username;\n        break;\n      default:\n        ava = `https://picsum.photos/id/${faker.random.number(1000)}/48`;\n        label = faker.random.words();\n        break;\n    }\n\n    var currentDate = new Date();\n    let timestamp = new Date(\n      currentDate.setTime(currentDate.getTime() - 60 * 1000 * parseInt(id)),\n    );\n    const itemTestData: StateProps = {\n      chatType: itemType,\n      ava: ava,\n      label: label,\n      username: username,\n      shortmessage: faker.hacker.phrase(),\n      timestamp: timestamp,\n    };\n\n    resolve(itemTestData);\n  });\n};\n\nexport { getTestData };\n","import * as React from 'react';\n\nimport { ChatItem } from './ChatItem';\nimport { getTestData } from './ChatItem.tesdata';\n\nimport { OwnProps, StateProps } from './types';\n\nclass ChatItemContainer extends React.Component<OwnProps, StateProps> {\n  constructor(props: OwnProps) {\n    super(props);\n\n    this.state = {\n      chatType: 0,\n      ava: '',\n      label: '',\n      username: '',\n      shortmessage: '',\n    };\n  }\n\n  componentDidMount() {\n    getTestData(this.props.chatId).then((response) =>\n      this.setState({ ...response }),\n    );\n  }\n\n  public render() {\n    const { chatId, isPinned, ...divProps } = { ...this.props };\n    const { chatType, ava, label, username, shortmessage } = { ...this.state };\n    return (\n      <ChatItem\n        chatType={chatType}\n        ava={ava}\n        label={label}\n        username={username}\n        shortmessage={shortmessage}\n        chatId={chatId}\n        isPinned={isPinned}\n        {...divProps}\n      />\n    );\n  }\n}\n\nexport { ChatItemContainer as ChatItem };\n","import React, { FunctionComponent } from 'react';\n\nimport { List as ChatList } from '../UI/List';\nimport { ChatItem } from '../ChatItem';\n\nimport { IProps } from './types';\n\nimport styles from './Sidebar.module.scss';\n\nexport const Sidebar: FunctionComponent<IProps> = (props) => {\n  const { aChats, handleClickCreator, activeChat } = { ...props };\n  return (\n    <div className={styles.sidebar}>\n      <ChatList>\n        {aChats.map((chatProps) => {\n          const { chatId } = { ...chatProps };\n          return (\n            <ChatItem\n              key={chatId}\n              className={activeChat === chatId ? styles.active : ''}\n              onClick={handleClickCreator(chatId)}\n              chatId={chatId}\n            />\n          );\n        })}\n      </ChatList>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport faker from 'faker';\n\nimport { IChat } from 'types';\nimport { OwnProps, StateProps } from './types';\n\nimport { Sidebar } from './Sidebar';\n\n//шарить не нужно - грузим здесь\n//чаты уже отсортированы на стороне сервера\nconst getChats = (chatCount: number = 50): Promise<IChat[]> => {\n  return new Promise((resolve, reject) => {\n    let aChats: IChat[] = [];\n    let id = 0;\n    for (let index = 0; index < chatCount; index++) {\n      //расчетный id нужен чтобы вычислить дату на тестовых данных\n      id += ++index * faker.random.number(100);\n      let chat: IChat = {\n        chatId: id.toString(),\n        isPinned: false,\n      };\n      aChats.push(chat);\n    }\n    resolve(aChats);\n  });\n};\n\nclass SidebarContainer extends React.Component<OwnProps, StateProps> {\n  constructor(props: OwnProps) {\n    super(props);\n\n    this.state = { aChats: [] };\n  }\n\n  componentDidMount() {\n    getChats().then((response) => this.setState({ aChats: response }));\n  }\n\n  public render() {\n    const { handleClickCreator, activeChat } = { ...this.props };\n    return (\n      <Sidebar\n        aChats={this.state.aChats}\n        handleClickCreator={handleClickCreator}\n        activeChat={activeChat}\n      />\n    );\n  }\n}\n\nexport { SidebarContainer as Sidebar };\n","import React from 'react';\n\nimport { MessageList } from 'components/MessageList';\nimport { Sidebar } from 'components/Sidebar';\n\nimport styles from './Chat.module.scss';\n\nexport class Chat extends React.Component {\n  readonly state = {\n    chatId: undefined,\n  };\n  handleClickCreator = (chatId: string) => {\n    return () => {\n      this.setState({ chatId: chatId });\n    };\n  };\n\n  render() {\n    const { chatId } = { ...this.state };\n\n    return (\n      <div className={styles.chat}>\n        <Sidebar\n          activeChat={chatId}\n          handleClickCreator={this.handleClickCreator}\n        />\n        <MessageList chatId={chatId} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Chat } from 'components/Chat';\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__3qUkX\",\"active\":\"Sidebar_active__9wFJE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Message_content__17Doq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blank\":\"MessageList_blank__J3Utj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__i58WX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"Comment_comment__lbK_I\",\"left\":\"Comment_left__2xve6\",\"avatar\":\"Comment_avatar__3ilhB\",\"right\":\"Comment_right__1oP5A\",\"top\":\"Comment_top__2UFsY\",\"label\":\"Comment_label__2uyWa\",\"timestamp\":\"Comment_timestamp__3l9lE\"};"],"sourceRoot":""}